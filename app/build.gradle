plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'maven-publish'
    id 'idea'
}

group = 'flink.starter'
version = '0.0.1'
description = 'bigin-message-job'

ext {
    javaVersion = '1.8'
    flinkVersion = '1.14.4'
    scalaBinaryVersion = '2.11'
    lombokVersion = '1.18.20'
    junitVersion = '5.7.1'
    javaMainClass = "flink.starter.job.StreamJob"
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    // Define the main class for the application.
    mainClass = javaMainClass
}

applicationDefaultJvmArgs = ["-Dlog4j.configurationFile=log4j2.properties"]

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://repo1.maven.org/maven2/" }
    maven {
        url "https://repository.apache.org/content/repositories/snapshots/"
        mavenContent {
            snapshotsOnly()
        }
    }
}

dependencies {
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

    // --------------------------------------------------------------
    // Compile-time dependencies that should NOT be part of the
    // shadow jar and are provided in the lib folder of Flink
    // --------------------------------------------------------------
    implementation "com.typesafe:config:1.4.2"

    shadow "org.apache.flink:flink-runtime:${flinkVersion}"
    shadow "org.apache.flink:flink-clients_${scalaBinaryVersion}:${flinkVersion}"
    shadow "org.apache.flink:flink-java:${flinkVersion}"
    shadow "org.apache.flink:flink-streaming-java_${scalaBinaryVersion}:${flinkVersion}"
    shadow "org.apache.flink:flink-streaming-scala_${scalaBinaryVersion}:${flinkVersion}"

    // test
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    testImplementation "org.junit.platform:junit-platform-engine:1.6.2"
    testImplementation 'org.assertj:assertj-core:3.20.2'

    testImplementation 'org.testcontainers:testcontainers:1.16.0'
    testImplementation 'org.testcontainers:junit-jupiter:1.16.0'

    testImplementation "org.apache.flink:flink-test-utils-junit:${flinkVersion}"
    testImplementation "org.apache.flink:flink-test-utils_${scalaBinaryVersion}:${flinkVersion}"
}

sourceSets {
    // Add shadow configuration to runtime class path so that the
    // dynamically-generated tasks by IntelliJ are able to run and have
    // all dependencies they need. (Luckily, this does not influence what
    // ends up in the final shadowJar.)sourceSets {
    main.runtimeClasspath += configurations.shadow

    test.compileClasspath += configurations.shadow
    test.runtimeClasspath += configurations.shadow
}

shadowJar {
    mergeServiceFiles()
    dependencies {
        exclude(dependency("org.apache.flink:force-shading"))
        exclude(dependency('com.google.code.findbugs:jsr305'))
        exclude(dependency('org.slf4j:.*'))
        exclude(dependency('log4j:.*'))
        exclude(dependency('org.apache.logging.log4j:log4j-to-slf4j'))
        // already provided dependencies from serializer frameworks
        exclude(dependency('com.esotericsoftware.kryo:kryo'))
        exclude(dependency('javax.servlet:servlet-api'))
        exclude(dependency('org.apache.httpcomponents:httpclient'))
    }
}

assemble.dependsOn(shadowJar)

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}